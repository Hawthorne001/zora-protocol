// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetApiKeyData,
  GetApiKeyResponse,
  GetCoinData,
  GetCoinResponse,
  GetCoinCommentsData,
  GetCoinCommentsResponse,
  GetCoinHoldersData,
  GetCoinHoldersResponse,
  GetCoinSwapsData,
  GetCoinSwapsResponse,
  GetCoinsData,
  GetCoinsResponse,
  SetCreateUploadJwtData,
  SetCreateUploadJwtResponse,
  GetExploreData,
  GetExploreResponse,
  GetFeaturedCreatorsData,
  GetFeaturedCreatorsResponse,
  GetProfileData,
  GetProfileResponse,
  GetProfileBalancesData,
  GetProfileBalancesResponse,
  GetProfileCoinsData,
  GetProfileCoinsResponse,
  GetTokenInfoData,
  GetTokenInfoResponse,
  GetTraderLeaderboardData,
  GetTraderLeaderboardResponse,
  PostQuoteData,
  PostQuoteResponse,
  PostQuoteError,
  GetCreateContentPoolConfigData,
  GetCreateContentPoolConfigResponse,
  GetCreateContentPoolConfigError,
  PostCreateContentData,
  PostCreateContentResponse,
  PostCreateContentError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * zoraSDK_apiKey query
 */
export const getApiKey = <ThrowOnError extends boolean = false>(
  options: Options<GetApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/apiKey",
    ...options,
  });
};

/**
 * zoraSDK_coin query
 */
export const getCoin = <ThrowOnError extends boolean = false>(
  options: Options<GetCoinData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoinResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/coin",
    ...options,
  });
};

/**
 * zoraSDK_coinComments query
 */
export const getCoinComments = <ThrowOnError extends boolean = false>(
  options: Options<GetCoinCommentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoinCommentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/coinComments",
    ...options,
  });
};

/**
 * zoraSDK_coinHolders query
 */
export const getCoinHolders = <ThrowOnError extends boolean = false>(
  options: Options<GetCoinHoldersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoinHoldersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/coinHolders",
    ...options,
  });
};

/**
 * zoraSDK_coinSwaps query
 */
export const getCoinSwaps = <ThrowOnError extends boolean = false>(
  options: Options<GetCoinSwapsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoinSwapsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/coinSwaps",
    ...options,
  });
};

/**
 * zoraSDK_coins query
 */
export const getCoins = <ThrowOnError extends boolean = false>(
  options: Options<GetCoinsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoinsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/coins",
    ...options,
  });
};

/**
 * zoraSDK_createUploadJWT mutation
 */
export const setCreateUploadJwt = <ThrowOnError extends boolean = false>(
  options?: Options<SetCreateUploadJwtData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    SetCreateUploadJwtResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/createUploadJWT",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * zoraSDK_explore query
 */
export const getExplore = <ThrowOnError extends boolean = false>(
  options: Options<GetExploreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetExploreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/explore",
    ...options,
  });
};

/**
 * zoraSDK_featuredCreators query
 */
export const getFeaturedCreators = <ThrowOnError extends boolean = false>(
  options?: Options<GetFeaturedCreatorsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFeaturedCreatorsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/featuredCreators",
    ...options,
  });
};

/**
 * zoraSDK_profile query
 */
export const getProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/profile",
    ...options,
  });
};

/**
 * zoraSDK_profileBalances query
 */
export const getProfileBalances = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileBalancesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileBalancesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/profileBalances",
    ...options,
  });
};

/**
 * zoraSDK_profileCoins query
 */
export const getProfileCoins = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileCoinsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileCoinsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/profileCoins",
    ...options,
  });
};

/**
 * zoraSDK_tokenInfo query
 */
export const getTokenInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetTokenInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTokenInfoResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/tokenInfo",
    ...options,
  });
};

/**
 * zoraSDK_traderLeaderboard query
 */
export const getTraderLeaderboard = <ThrowOnError extends boolean = false>(
  options?: Options<GetTraderLeaderboardData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTraderLeaderboardResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/traderLeaderboard",
    ...options,
  });
};

export const postQuote = <ThrowOnError extends boolean = false>(
  options?: Options<PostQuoteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostQuoteResponse,
    PostQuoteError,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/quote",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getCreateContentPoolConfig = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCreateContentPoolConfigData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCreateContentPoolConfigResponse,
    GetCreateContentPoolConfigError,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/create/content/pool-config",
    ...options,
  });
};

export const postCreateContent = <ThrowOnError extends boolean = false>(
  options?: Options<PostCreateContentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostCreateContentResponse,
    PostCreateContentError,
    ThrowOnError
  >({
    security: [
      {
        name: "api-key",
        type: "apiKey",
      },
    ],
    url: "/create/content",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
